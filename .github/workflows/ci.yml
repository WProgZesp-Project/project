name: CI/CD for PdfApp

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  lint-and-test:
    name: Lint & Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: pdfdb
          POSTGRES_USER: pdfuser
          POSTGRES_PASSWORD: pdfpass
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      POSTGRES_DB: pdfdb
      POSTGRES_USER: pdfuser
      POSTGRES_PASSWORD: pdfpass
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      TEST: true
      DJANGO_SETTINGS_MODULE: pdfapp.settings

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Write SECRET_KEY to .env
      run: echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" > .env

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest pytest-django python-dotenv

    - name: Run flake8 (lint)
      run: flake8 .

    - name: Apply migrations
      working-directory: ./pdfapp
      run: |
        export PYTHONPATH=$PYTHONPATH:$(pwd)
        python manage.py migrate

    - name: Run Django tests
      working-directory: ./pdfapp
      run: |
        export PYTHONPATH=$PYTHONPATH:$(pwd)
        pytest

  deploy:
    name: Deploy to AWS (test)
    needs: lint-and-test
    runs-on: ubuntu-latest
#    if: github.ref == 'refs/heads/main' #test

    env:
      AWS_ACCOUNT_ID: 384782264249
      AWS_REGION:    eu-north-1
      ECR_REPOSITORY:    ${{ secrets.ECR_REPOSITORY }}
      ECS_CLUSTER:       ${{ secrets.ECS_CLUSTER }}
      ECS_SERVICE_NAME:  ${{ secrets.ECS_SERVICE_NAME }}
      ECS_TASK_FAMILY:   ${{ secrets.ECS_TASK_FAMILY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Ensure ECR repo exists
        run: |
          aws ecr describe-repositories \
            --repository-names ${ECR_REPOSITORY} \
          || aws ecr create-repository \
            --repository-name ${ECR_REPOSITORY}

      - name: Set image tag
        run: echo "IMAGE_TAG=backend-${GITHUB_SHA}" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password \
            --region ${AWS_REGION} \
          | docker login \
            --username AWS \
            --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com

      - name: Build & Push Docker image
        run: |
          IMAGE_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI

      - name: Render ECS task definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: django
          image: ${{ env.IMAGE_URI }}
          environment-variables: |
            ENV=PROD
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
            POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
            EMAIL=${{ secrets.EMAIL }}
            EMAIL_PASS=${{ secrets.EMAIL_PASS }}
            SECRET_KEY=${{ secrets.SECRET_KEY }}


      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          cluster: ${{ env.ECS_CLUSTER }}
          service: ${{ env.ECS_SERVICE_NAME }}
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}

